#!/usr/bin/env python3

import argparse
import sys

import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.ticker as ticker
import numpy as np


COLUMNS = (
    "ack_seq",
    "cwnd",
    "inet_id",
    "rate",
    "time",
)

LABELS = {
    "ack_seq": "ACK'ed sequence #",
    "cwnd": "Congestion window",
    "rate": "Transmission rate",
    "time": "Time",
}

LIMITS = {
    "rate": (0, 100 * 10 ** 9),
}

PRETTY_UNITS = {
    "us": "Âµs",
}

UNIT_FACTORS = {
    "bit/s": 8,
    "s": 0.000001,
    "us": 0.001,
}

# The first unit specified for a column, if any, is the default unit:
UNITS = {
    "cwnd": ("bytes",),
    "rate": ("bytes/s", "bit/s"),
    "time": ("us", "ns", "s"),
}


def check_unit(col, unit):
    units = UNITS.get(col, (None,))
    if unit is None:
        unit = units[0]
    if unit not in (None, *units):
        raise LookupError(f"unit {unit} not available for {col}")
    return unit


def set_lim(values, lim_min, lim_max, lim_func):
    min_val = values.min()
    max_val = values.max()
    try:
        lim_min = max(lim_min, min_val)
    except TypeError:
        lim_min = min_val
    try:
        lim_max = min(lim_max, max_val)
    except TypeError:
        lim_max = max_val
    return lim_func(lim_min, lim_max)


def setup_axis(axis, col, unit):
    unit = PRETTY_UNITS.get(unit, unit)
    axis.set_minor_locator(ticker.AutoMinorLocator())
    if col == "ack_seq":
        axis.set_major_formatter(ticker.StrMethodFormatter("{x:.0f}"))
    elif col == "cwnd":
        axis.set_major_formatter(ticker.StrMethodFormatter("{x:.0f}"))
    elif col == "rate":
        axis.set_major_formatter(ticker.EngFormatter(unit=unit))
    elif col == "time":
        precision = 0
        if unit == "s":
            precision = 3
        axis.set_major_formatter(
            ticker.StrMethodFormatter(f"{{x:.{precision}f}} {unit}")
        )


def main():
    early_argparser = argparse.ArgumentParser(add_help=False, allow_abbrev=False)
    early_argparser.add_argument(
        "--info",
        action="store_true",
        help="show information about the CSV file and exit",
    )
    early_args, remaining_argv = early_argparser.parse_known_args()

    argparser = argparse.ArgumentParser(
        add_help=True, allow_abbrev=False, parents=[early_argparser]
    )
    argparser.add_argument("csv_file", type=argparse.FileType("r"))

    if not early_args.info:
        argparser.add_argument("--fmt", default="-")
        argparser.add_argument("--xmax", default=None, type=int)
        argparser.add_argument("--xmin", default=None, type=int)
        argparser.add_argument("--ymax", default=None, type=int)
        argparser.add_argument("--ymin", default=None, type=int)
        argparser.add_argument("--xunit")
        argparser.add_argument("--yunit")
        argparser.add_argument("x", choices=COLUMNS)
        argparser.add_argument("y", choices=COLUMNS)

    args = argparser.parse_args(remaining_argv, early_args)

    df = pd.read_csv(args.csv_file)
    df["time"] -= df["time"].min()

    if args.info:
        pd.options.display.float_format = "{:.0f}".format
        df.info()
        print(f"\n{df.describe(percentiles=[])}")
        return

    if args.x == args.y:
        return "arguments x and y cannot be the same"

    try:
        args.xunit = check_unit(args.x, args.xunit)
    except LookupError as e:
        return e

    try:
        args.yunit = check_unit(args.y, args.yunit)
    except LookupError as e:
        return e

    df[args.x] *= UNIT_FACTORS.get(args.xunit, 1)
    df[args.y] *= UNIT_FACTORS.get(args.yunit, 1)
    df = df.set_index(args.x).loc[args.xmin : args.xmax]

    fig, ax = plt.subplots()
    ax.plot(df.index, df[args.y], args.fmt)
    ax.set_xlabel(LABELS.get(args.x, args.x))
    ax.set_ylabel(LABELS.get(args.y, args.y))
    setup_axis(ax.xaxis, args.x, args.xunit)
    setup_axis(ax.yaxis, args.y, args.yunit)
    set_lim(df[args.y], args.ymin, args.ymax, ax.set_ylim)

    plt.show()


if __name__ == "__main__":
    raise SystemExit(main())
