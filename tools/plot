#!/usr/bin/env python3

import argparse
import sys

import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.ticker as ticker
import numpy as np


# "CN color spec", see https://matplotlib.org/stable/tutorials/colors/colors.html#specifying-colors
COLORS = [f"C{i}" for i in range(11)]


COLUMNS = (
    "ack_seq",
    "base_rtt",
    "beta",
    "cwnd",
    "hash",
    "rate",
    "time",
)

LABELS = {
    "ack_seq": "ACK'ed sequence #",
    "base_rtt": "Base RTT",
    "beta": "Additive increase β",
    "cwnd": "Congestion window",
    "rate": "Transmission rate",
    "time": "Time",
}

LIMITS = {
    "rate": (0, 100 * 10 ** 9),
}

PRETTY_UNITS = {
    "us": "µs",
}

UNIT_FACTORS = {
    "bit/s": 8,
    "ms": 0.001,
    "s": 0.000001,
}

# The first unit specified for a column, if any, is the default unit:
UNITS = {
    "base_rtt": ("us", "ms", "s"),
    "beta": ("bytes",),
    "cwnd": ("bytes",),
    "rate": ("bytes/s", "bit/s"),
    "time": ("us", "ms", "s"),
}


def check_unit(col, unit):
    units = UNITS.get(col, (None,))
    if unit is None:
        unit = units[0]
    if unit not in (None, *units):
        raise LookupError(f"unit “{unit}“ not available for “{col}“")
    return unit


def list_str_to_dict(list_str):
    d = {}
    for s in list_str.split(","):
        k, v = s.split(":")
        d[k] = v
    return d


def set_lim(values, lim_min, lim_max, lim_func):
    min_val = values.min()
    max_val = values.max()
    try:
        lim_min = max(lim_min, min_val)
    except TypeError:
        lim_min = min_val
    try:
        lim_max = min(lim_max, max_val)
    except TypeError:
        lim_max = max_val
    return lim_func(lim_min, lim_max)


def setup_axis(axis, col, unit):
    pretty_unit = PRETTY_UNITS.get(unit, unit)
    axis.set_minor_locator(ticker.AutoMinorLocator())

    if col in ("ack_seq", "cwnd"):
        axis.set_major_formatter(ticker.StrMethodFormatter("{x:.0f}"))
    else:
        if unit in ("bit/s", "bytes/s"):
            axis.set_major_formatter(ticker.EngFormatter(unit=pretty_unit))
        elif unit in ("s", "ms", "us"):
            precision = 0
            if unit == "s":
                precision = 3
            axis.set_major_formatter(
                ticker.StrMethodFormatter(f"{{x:.{precision}f}} {pretty_unit}")
            )


def main():
    early_argparser = argparse.ArgumentParser(add_help=False, allow_abbrev=False)
    early_argparser.add_argument(
        "--info",
        action="store_true",
        help="show information about the CSV file and exit",
    )
    early_args, remaining_argv = early_argparser.parse_known_args()

    argparser = argparse.ArgumentParser(
        add_help=True, allow_abbrev=False, parents=[early_argparser]
    )
    argparser.add_argument("csv_file", type=argparse.FileType("r"))

    if not early_args.info:
        argparser.add_argument("--fmt", default={}, type=list_str_to_dict)
        argparser.add_argument("--max", default={}, type=list_str_to_dict)
        argparser.add_argument("--min", default={}, type=list_str_to_dict)
        argparser.add_argument("--unit", default={}, type=list_str_to_dict)
        argparser.add_argument("x", choices=COLUMNS)
        argparser.add_argument("y", choices=COLUMNS, nargs="+")

    args = argparser.parse_args(remaining_argv, early_args)

    df = pd.read_csv(args.csv_file).dropna()
    df["time"] -= df["time"].min()

    if args.info:
        pd.options.display.float_format = "{:.0f}".format
        df.info()
        print(f"\n{df.describe(percentiles=[])}")
        return

    if len(args.y) > 2:
        return "cannot pass more than 2 columns as y axis"

    xunit = args.unit.get(args.x)
    try:
        xunit = check_unit(args.x, xunit)
    except LookupError as e:
        return e

    df[args.x] *= UNIT_FACTORS.get(xunit, 1)
    df = (
        df.set_index(args.x)
        .sort_index()
        .loc[args.min.get(args.x) : args.max.get(args.x)]
    )

    fig, ax = plt.subplots()
    ax.set_xlabel(LABELS.get(args.x, args.x))
    setup_axis(ax.xaxis, args.x, xunit)
    axx = None
    lines = []

    for i, y in enumerate(args.y):
        if args.x == y:
            return f"cannot use the same column “{args.x}” for x and y axis"

        ycolor = COLORS[i % len(COLORS)]
        yfmt = args.fmt.get(y) or "-"
        ymax = args.max.get(y)
        ymin = args.min.get(y)
        yunit = args.unit.get(y)
        try:
            yunit = check_unit(y, yunit)
        except LookupError as e:
            return e
        df[y] *= UNIT_FACTORS.get(yunit, 1)

        try:
            axx = axx.twinx()
        except AttributeError:
            axx = ax

        lines.extend(
            axx.plot(df.index, df[y], yfmt, color=ycolor, label=LABELS.get(y, y))
        )
        axx.set_ylabel(LABELS.get(y, y))
        setup_axis(axx.yaxis, y, yunit)
        set_lim(df[y], ymin, ymax, axx.set_ylim)
        axx.tick_params(axis="y")

    if len(lines) > 1:
        ax.legend(handles=lines)
    fig.tight_layout()
    plt.show()


if __name__ == "__main__":
    raise SystemExit(main())
