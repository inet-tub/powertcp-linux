#!/bin/bash
#
# Example usage:
#   ./tools/iratio_experiment client eno1 192.168.13.3 user@tofino /path/to/private/ssh/key bf-sde-9.7.2/ '1 2 4 8 16'
#   ./tools/iratio_experiment client -C reno -r 1 -s 100 -t 60 eno1 192.168.13.3 user@tofino /path/to/private/ssh/key bf-sde-9.7.2/ '1 2 4 8 16'
#
#   ./tools/iratio_experiment server eno1
#

set -eu

client_runs()
{
	local run_str
	printf -v run_str '\e[u\e[Krun %%i/%i' "$runs"

	progress '\e[s'
	for ((i = 0; i < runs; ++i)); do
		progress "$run_str" "$i"
		avg_throughput=$(
			iperf3 --client="$srv_ip" \
				--congestion="$cca" \
				--interval=0 \
				--json \
				--no-delay \
				--omit=1 \
				--time="$run_duration" |
				jq .end.sum_received.bits_per_second
		)
		printf '%s,%s,%s,%d,%s\n' "$cca" "$int" "$gro" "$iratio" "${avg_throughput%%.*}"
		sleep 1 # Give the server a moment to be ready again
	done
	progress "${run_str}\n" "$runs"
}

die()
{
	local r=$1
	shift
	# shellcheck disable=SC2059
	printf "$@" >&2
	exit "$r"
}

progress()
{
	if [[ $role == server || ! -t 1 ]]; then
		# shellcheck disable=SC2059
		printf "$@" >&2
	fi
}

server_runs()
{
	printf '\n'
	for ((i = 0; i < runs; ++i)); do
		iperf3 --one-off --server
	done
}

readonly role=$1
shift

if [[ $role == client ]]; then
	cca=cubic
	link_speed=25
	mtu=1500
	qdepth_threshold=1500
	run_duration=10
	runs=10

	while getopts 'C:M:r:s:t:' opt; do
		case $opt in
		C) cca=$OPTARG ;;
		M) mtu=$OPTARG ;;
		q) qdepth_threshold=$OPTARG ;;
		r) runs=$OPTARG ;;
		s) link_speed=$OPTARG ;;
		t) run_duration=$OPTARG ;;
		?) exit 2 ;;
		esac
	done

	readonly cca
	readonly link_speed
	readonly qdepth_threshold
	readonly run_duration
	readonly runs

	shift $((OPTIND - 1))
else
	while getopts '' opt; do
		case $opt in
		?) exit 2 ;;
		esac
	done
fi

readonly iface=$1
shift

if [[ $role == client ]]; then
	readonly srv_ip=$1
	readonly switch_user_host=$2
	readonly private_key_file=$3
	readonly switch_sde_dir=$4
	readonly iratios=$5

	shift 5
fi

if [[ $# -gt 0 ]]; then
	die 2 'unexpected arguments -- %s\n' "$*"
fi

if [[ $role == client ]]; then
	progress 'Sending experiment parameters to server …\n'
	netcat -q0 "$srv_ip" 5201 <<-EOF || die 1 "Cannot reach server, experiment must be started there first!\n"
		cca="$cca"
		iratios="$iratios"
		mtu="$mtu"
		runs="$runs"
	EOF
else
	progress 'Waiting for client to send experiment parameters …\n'
	# Executing arbitrary remote shell code, what could go wrong O:-)
	eval "$(netcat -q0 -l 5201)"
fi

readonly repo_dir=${0%/*}/..
if [[ ! -d ${repo_dir}/tools ]]; then
	printf "I don’t know where I’m called from\n" >&2
	exit 2
fi

"${repo_dir}/bpf/tcp-int/code/src/tools/tcp_int" unload &>/dev/null || :
"${repo_dir}/bpf/tcp-int/code/src/tools/tcp_int" load
printf "%d" "$$" >/sys/fs/cgroup/cgroup.tcp-int/cgroup.procs

[[ $role == server ]] || printf 'cca,int,gro,iratio,avg_throughput\n'

ip link set dev "$iface" mtu "$mtu"

int=disable
iratio=-1
"${repo_dir}/bpf/tcp-int/code/src/tools/tcp_int" "$int"
for gro in off on; do
	ethtool -K "$iface" gro "$gro"

	progress 'cca=%s gro=%s int=%s iratio=%d:\t' "$cca" "$gro" "$int" "$iratio"
	"${role}_runs"
done

int=enable
"${repo_dir}/bpf/tcp-int/code/src/tools/tcp_int" "$int"
for iratio in $iratios; do
	if [[ $role == client ]]; then
		# shellcheck disable=SC2087
		ssh -i "$private_key_file" "$switch_user_host" bash -s <<-EOF
			set -e
			cd "$switch_sde_dir"
			. set_sde.bash >/dev/null
			./pkgsrc/switch-p4-16/scripts/tcp_int_cp.py deploy --link "$link_speed" --iratio "$iratio" --qdepth_th "$qdepth_threshold" &>/dev/null
		EOF
	fi

	for gro in off on; do
		ethtool -K "$iface" gro "$gro"

		progress 'cca=%s gro=%s int=%s iratio=%d:\t' "$cca" "$gro" "$int" "$iratio"
		"${role}_runs"
	done
done
