#!/usr/bin/env python3

import argparse

import matplotlib.legend_handler
import matplotlib.pyplot as plt
import matplotlib.ticker as ticker
import pandas as pd

FIGSIZE = (5, 3)

REPLACEMENTS = {
    "gro": "GRO",
    "int": "INT",
}


def main():
    argparser = argparse.ArgumentParser()
    argparser.add_argument("csv_file", type=argparse.FileType("r"))
    args = argparser.parse_args()

    df = pd.read_csv(args.csv_file).rename(columns=REPLACEMENTS).replace(REPLACEMENTS)
    args.csv_file.close()  # Be nice and close files :-)

    if df["cca"].nunique() > 1:
        return "cannot plot for multiple CCAs"
    cca = df.loc[0, "cca"]

    means_without_int = pd.pivot_table(
        df.loc[df["INT"] == "disable"], index="GRO", values="avg_throughput"
    )
    means_with_int = pd.pivot_table(
        df.loc[df["INT"] == "enable"],
        columns="GRO",
        index="iratio",
        values="avg_throughput",
    )

    fig, ax = plt.subplots(figsize=FIGSIZE, layout="constrained")
    means_with_int.plot(
        ax=ax, marker="s", xlabel="iratio", ylabel="Avg. throughput (bit/s)"
    )
    hlines = [
        ax.axhline(
            avg_throughput, color=line.get_color(), label="INT disabled", linestyle="--"
        )
        for line, avg_throughput in zip(
            ax.get_lines(), means_without_int["avg_throughput"]
        )
    ]

    ax.add_artist(ax.get_legend())
    ax.legend(
        handler_map={tuple: matplotlib.legend_handler.HandlerTuple(None, pad=0)},
        handles=[tuple(hlines)],
        labels=["INT disabled"],
        loc=(0.667, 0.22),
    )

    fig2, ax2 = plt.subplots(figsize=FIGSIZE, layout="constrained")
    ax2 = means_with_int.loc[:16].plot(
        ax=ax2, marker="s", xlabel="iratio", ylabel="Avg. throughput (bit/s)"
    )
    hline = ax2.axhline(
        means_without_int.loc["off", "avg_throughput"],
        color=ax2.get_lines()[0].get_color(),
        linestyle="--",
    )

    ax2.add_artist(ax2.get_legend())
    ax2.legend(handles=[hline], labels=["INT disabled"], loc=(0.015, 0.555))

    throughput_fmt = ticker.EngFormatter()
    ax.yaxis.set_major_formatter(throughput_fmt)
    ax2.yaxis.set_major_formatter(throughput_fmt)

    fig.savefig(f"{cca}-iratio-gro-avg_throughput.pdf")
    fig2.savefig(f"{cca}-iratio-gro-avg_throughput-zoom.pdf")

    plt.show()


if __name__ == "__main__":
    raise SystemExit(main())
