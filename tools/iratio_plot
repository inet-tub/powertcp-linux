#!/usr/bin/env python3

import argparse

import matplotlib as mpl
import matplotlib.legend_handler
import matplotlib.pyplot as plt
import matplotlib.ticker as ticker
import pandas as pd

FIGSIZE = (5, 3)

REPLACEMENTS = {
    "gro": "GRO",
    "int": "INT",
}


def main():
    try:
        mpl.style.use("seaborn-v0_8-colorblind")
    except Exception as e:
        print("Failed to change matplotlib style: {}".format(e))

    argparser = argparse.ArgumentParser()
    argparser.add_argument("csv_file", type=argparse.FileType("r"))
    argparser.add_argument(
        "--max-iratio", type=int, help="maximum iratio value to plot"
    )
    args = argparser.parse_args()

    df = pd.read_csv(args.csv_file).rename(columns=REPLACEMENTS).replace(REPLACEMENTS)
    args.csv_file.close()  # Be nice and close files :-)

    if df["cca"].nunique() > 1:
        return "cannot plot for multiple CCAs"
    cca = df.loc[0, "cca"]

    max_iratio = max(df["iratio"])
    try:
        max_iratio = min(args.max_iratio, max_iratio)
    except TypeError:
        pass

    means_without_int = pd.pivot_table(
        df.loc[df["INT"] == "disable"], index="GRO", values="avg_throughput"
    )
    means_with_int = pd.pivot_table(
        df.loc[(df["INT"] == "enable") & (df["iratio"] <= max_iratio)],
        columns="GRO",
        index="iratio",
        values="avg_throughput",
    )

    fig, ax = plt.subplots(figsize=FIGSIZE, layout="constrained")
    means_with_int.plot(
        ax=ax, logx=True, marker="s", xlabel="iratio", ylabel="Avg. throughput (bit/s)"
    )
    hlines = [
        ax.axhline(
            avg_throughput, color=line.get_color(), label="INT disabled", linestyle="--"
        )
        for line, avg_throughput in zip(
            ax.get_lines(), means_without_int["avg_throughput"]
        )
    ]

    ax.add_artist(ax.get_legend())
    ax.legend(
        handler_map={tuple: matplotlib.legend_handler.HandlerTuple(None, pad=0)},
        handles=[tuple(hlines)],
        labels=["INT disabled"],
        loc="upper left",
    )

    iratio_fmt = ticker.LogFormatter(base=2)
    ax.xaxis.set_major_formatter(iratio_fmt)
    ax.xaxis.set_minor_formatter(iratio_fmt)

    ax.xaxis.set_major_locator(ticker.LogLocator(base=2))
    ax.xaxis.set_minor_locator(ticker.LogLocator(base=2))

    ax.yaxis.set_major_formatter(ticker.EngFormatter())

    max_iratio_str = "" if args.max_iratio is None else f"_{max_iratio}"
    fig.savefig(f"{cca}-iratio_upto{max_iratio_str}-gro-avg_throughput.pdf")

    plt.show()


if __name__ == "__main__":
    raise SystemExit(main())
